{"version":3,"sources":["ui.tsx","pages/home.tsx","auth.tsx","pages/callback.tsx","pages/login.tsx","pages/logout.tsx","App.tsx","serviceWorker.ts","reducers/auth.tsx","reducers/templates.tsx","history.tsx","reducers/index.tsx","store.tsx","index.tsx"],"names":["ComponentWithStore","Component","connect","state","dispatch","Home","auth","this","props","Container","fluid","Row","profile","Col","md","preferred_username","Card","bg","text","style","width","Header","Body","Title","Text","Form","Control","as","rows","access_token","JSON","stringify","to","defaultProps","scope","Constants","stsAuthority","clientId","clientRoot","clientScope","apiRoot","AuthService","userManager","settings","authority","client_id","redirect_uri","silent_redirect_uri","post_logout_redirect_uri","response_type","UserManager","Log","logger","console","level","INFO","getUser","signinRedirect","signinSilent","signoutRedirect","response_mode","signinRedirectCallback","OAuth2Callback","authService","user","handleCallback","then","setState","setUser","log","toastr","catch","error","Spinner","animation","role","className","type","Login","login","Modal","Dialog","href","Footer","Button","onClick","variant","logout","needs_login","AuthenticatedRoute","children","rest","render","location","pathname","from","Navbar","expand","sticky","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","Fragment","path","Boolean","window","hostname","match","DEFAULT_STATE","action","id_token","refresh_token","templates","history","createHistory","compose","combineReducers","router","connectRouter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","loaded","load","namespace","createStore","rootReducer","applyMiddleware","save","ReactDOM","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6fccc7ba.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\n/* import { withRouter } from \"react-router-dom\"\n * */\n\nexport function ComponentWithStore(Component: any) {\n    return connect(\n        state => {\n            return { ...state };\n        },\n        dispatch => {\n            return {};\n        }\n    )(Component);\n}\n","import React, { Component } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nimport { Redirect } from \"react-router-dom\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\n// import Button from \"react-bootstrap/Button\";\n// import ButtonGroup from \"react-bootstrap/ButtonGroup\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\n// import ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport { ComponentWithStore } from \"../ui\";\n\nclass Home extends Component<{}, any> {\n    static propTypes = {\n        auth: PropTypes.shape({\n            scope: PropTypes.string,\n            access_token: PropTypes.string,\n            id_token: PropTypes.string,\n            refresh_token: PropTypes.string,\n            profile: PropTypes.shape({\n                preferred_username: PropTypes.string\n            })\n        })\n    };\n\n    static defaultProps: InferProps<typeof Home.propTypes> = {\n        auth: {\n            scope: null,\n            profile: null\n        }\n    };\n\n    render() {\n        const { auth }: InferProps<typeof Home.propTypes> = this.props;\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    {auth.profile ? (\n                        <Col md={12}>\n                            <h1>Hello {auth.profile.preferred_username}</h1>\n                            <h2>Welcome to Fake NOM</h2>\n\n                            <hr />\n\n                            <Card\n                                bg=\"light\"\n                                text={\"dark\"}\n                                style={{ width: \"18rem\" }}\n                            >\n                                <Card.Header>Access Token</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>For usage with API</Card.Title>\n                                    <Card.Text>\n                                        <Form.Control as=\"textarea\" rows=\"3\">\n                                            {auth.access_token}\n                                        </Form.Control>\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n\n                            <hr />\n                            <h3>Your Session Metadata:</h3>\n\n                            <p>\n                                <pre>{JSON.stringify(auth, null, 4)}</pre>\n                            </p>\n                        </Col>\n                    ) : (\n                            <Redirect to=\"/login\" />\n                        )}\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default ComponentWithStore(Home);\n","import { Log, User, UserManager } from \"oidc-client\";\n\nexport class Constants {\n    public static stsAuthority =\n        \"https://id.t.newstore.net/auth/realms/gabriel-NA-43928/\";\n    public static clientId = \"fake-nom\";\n    public static clientRoot = \"https://reactkeycloak.ngrok.io\";\n    public static clientScope =\n        \"openid profile email template:read template:write\";\n\n    public static apiRoot = \"https://keycloak.fulltest.co/api/\";\n}\n\nexport class AuthService {\n    public userManager: UserManager;\n\n    constructor() {\n        const settings = {\n            authority: Constants.stsAuthority,\n            client_id: Constants.clientId,\n            redirect_uri: `${Constants.clientRoot}/oauth2/callback`,\n            silent_redirect_uri: `${Constants.clientRoot}/oauth2/refresh`,\n            // tslint:disable-next-line:object-literal-sort-keys\n            post_logout_redirect_uri: `${Constants.clientRoot}`,\n            response_type: \"code\",\n            scope: Constants.clientScope\n        };\n        this.userManager = new UserManager(settings);\n\n        Log.logger = console;\n        Log.level = Log.INFO;\n    }\n\n    public getUser(): Promise<User | null> {\n        return this.userManager.getUser();\n    }\n\n    public login(): Promise<void> {\n        return this.userManager.signinRedirect();\n    }\n\n    public renewToken(): Promise<User> {\n        return this.userManager.signinSilent();\n    }\n\n    public logout(): Promise<void> {\n        return this.userManager.signoutRedirect();\n    }\n    public handleCallback(): Promise<User> {\n        return new UserManager({\n            response_mode: \"query\"\n        }).signinRedirectCallback();\n    }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Redirect } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport * as toastr from \"toastr\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { AuthService } from \"../auth\";\n\ntype CallbackProps = {\n    setUser: any;\n};\ntype CallbackState = {\n    user: any;\n};\n\nclass OAuth2Callback extends Component<CallbackProps, CallbackState> {\n    public authService: AuthService;\n\n    constructor(props: any) {\n        super(props);\n\n        this.authService = new AuthService();\n        this.state = { user: null };\n    }\n\n    public componentDidMount() {\n        this.authService\n            .handleCallback()\n            .then(user => {\n                this.setState({ user });\n                this.props.setUser(user);\n                console.log(\"callback user\", user);\n                toastr.info(`callback succeedded`);\n            })\n            .catch(error => {\n                toastr.error(error);\n            });\n    }\n\n    render() {\n        const { user } = this.state;\n        console.log(user);\n        if (user !== null) {\n            return <Redirect to=\"/\" />;\n        }\n\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n\n                        <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nfunction setUser(user: any) {\n    return {\n        type: \"NEW_AUTHENTICATION\",\n        user\n    };\n}\nexport default connect(\n    state => {\n        return { ...state };\n    },\n    { setUser }\n)(OAuth2Callback);\n","import React, { Component } from \"react\";\nimport PropTypes, { InferProps } from \"prop-types\";\n\nimport Container from \"react-bootstrap/Container\";\n// import * as toastr from \"toastr\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { AuthService } from \"../auth\";\nimport { ComponentWithStore } from \"../ui\";\n\nclass Login extends Component<{}, any> {\n    public authService: AuthService;\n    static propTypes = {\n        auth: PropTypes.shape({\n            scope: PropTypes.string,\n            profile: PropTypes.shape({\n                preferred_name: PropTypes.string\n            })\n        })\n    };\n    static defaultProps: InferProps<typeof Login.propTypes> = {\n        auth: {\n            scope: null,\n            profile: null\n        }\n    };\n\n    constructor(props: any) {\n        super(props);\n\n        this.authService = new AuthService();\n    }\n\n    public login = () => {\n        this.authService.login();\n    };\n\n    render() {\n        const { auth }: InferProps<typeof Login.propTypes> = this.props;\n        if (auth.profile) {\n            return <Redirect to=\"/\" />;\n        }\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    <Col md={12}>\n                        <Modal.Dialog>\n                            <Modal.Header>\n                                <Modal.Title>\n                                    You will be taken to KeyCloak\n\t\t\t\t\t\t\t\t</Modal.Title>\n                            </Modal.Header>\n\n                            <Modal.Body>\n                                <p>\n                                    Your user needs at least the scopes{\" \"}\n                                    <code>template:read</code> or{\" \"}\n                                    <code>template:write</code> to use the\n\t\t\t\t\t\t\t\t\t<a href=\"https://keycloak.fulltest.co\">\n                                        Fake NewStore API v1\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t.\n\t\t\t\t\t\t\t\t</p>\n                            </Modal.Body>\n\n                            <Modal.Footer>\n                                <Button onClick={this.login} variant=\"primary\">\n                                    Proceed\n\t\t\t\t\t\t\t\t</Button>\n                            </Modal.Footer>\n                        </Modal.Dialog>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default ComponentWithStore(Login);\n","import React, { Component } from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { AuthService } from \"../auth\";\nimport { ComponentWithStore } from \"../ui\";\n\nclass Logout extends Component<{}, any> {\n    public authService: AuthService;\n\n    constructor(props: any) {\n        super(props);\n        this.authService = new AuthService();\n    }\n\n    public logout = () => {\n        this.authService.logout();\n    };\n\n    render() {\n        return (\n            <Container fluid=\"md\">\n                <Row>\n                    <Col md={12}>\n                        <Modal.Dialog>\n                            <Modal.Header>\n                                <Modal.Title>\n                                    Do you really wish to logout?\n\t\t\t\t\t\t\t\t</Modal.Title>\n                            </Modal.Header>\n\n                            <Modal.Footer>\n                                <Button onClick={this.logout} variant=\"danger\">\n                                    Logout\n\t\t\t\t\t\t\t\t</Button>\n                            </Modal.Footer>\n                        </Modal.Dialog>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\nexport default ComponentWithStore(Logout);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect\n} from \"react-router-dom\";\n/* import { NavLink } from \"react-router-dom\";*/\n// import { ComponentWithStore } from \"./ui\";\n\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport Home from \"./pages/home\";\nimport OAuth2Callback from \"./pages/callback\";\nimport Login from \"./pages/login\";\nimport Logout from \"./pages/logout\";\nimport { ComponentWithStore } from \"./ui\";\n\ntype AppState = {\n    user: any;\n    error: Error | null;\n};\ntype AppProps = {\n    auth: any;\n};\n\nfunction needs_login(auth: any) {\n    if (!auth) {\n        return true;\n    }\n    if (!auth.scope) {\n        return true;\n    }\n    return typeof auth.scope !== \"string\";\n}\n\nclass App extends Component<AppProps, AppState> {\n    static propTypes = {\n        auth: PropTypes.object\n    };\n    render() {\n        const { auth } = this.props;\n\n        function AuthenticatedRoute({\n            children,\n            ...rest\n        }: {\n            [key: string]: any;\n        }) {\n            return (\n                <Route\n                    {...rest}\n                    render={({ location }) =>\n                        !needs_login(auth) ? (\n                            children\n                        ) : (\n                                <Redirect\n                                    to={{\n                                        pathname: \"/login\",\n                                        state: { from: location }\n                                    }}\n                                />\n                            )\n                    }\n                />\n            );\n        }\n\n        return (\n            <Router>\n                <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\n                    <LinkContainer to=\"/\">\n                        <Navbar.Brand>Fake NOM</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"fakenom-navbar-nav\" />\n\n                    <Navbar.Collapse\n                        className=\"justify-content-end\"\n                        id=\"fakenom-navbar-nav\"\n                    >\n                        <Nav>\n                            {needs_login(auth) ? (\n                                <LinkContainer to=\"/login\">\n                                    <Nav.Link>Login</Nav.Link>\n                                </LinkContainer>\n                            ) : (\n                                    <React.Fragment>\n                                        <LinkContainer to=\"/\">\n                                            <Nav.Link>Home</Nav.Link>\n                                        </LinkContainer>\n\n                                        <LinkContainer to=\"/logout\">\n                                            <Nav.Link>Logout</Nav.Link>\n                                        </LinkContainer>\n                                    </React.Fragment>\n                                )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n                <Switch>\n                    <Route path=\"/oauth2/callback\">\n                        <OAuth2Callback />\n                    </Route>\n                    <Route path=\"/login\">\n                        <Login />\n                    </Route>\n                    <Route path=\"/logout\">\n                        <Logout />\n                    </Route>\n                    <AuthenticatedRoute path=\"/\">\n                        <Home />\n                    </AuthenticatedRoute>\n                </Switch>\n            </Router>\n        );\n    }\n}\nexport default ComponentWithStore(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import jwt_decode from \"jwt-decode\";\n\nconst DEFAULT_STATE = {};\n\nexport const auth = (state: any = DEFAULT_STATE, action: any = {}) => {\n    switch (action.type) {\n        case \"NEW_AUTHENTICATION\":\n            let { user } = action;\n            let {\n                id_token,\n                access_token,\n                refresh_token,\n                scope,\n                profile\n            } = user;\n            return {\n                ...state,\n                scope,\n                profile,\n                user: action.user,\n                id_token,\n                access_token,\n                refresh_token\n            };\n\n        case \"LOGOUT\":\n            return {};\n        default:\n            return { ...state };\n    }\n};\n\nexport default auth;\n","export const templates = (state: any = {}, action: any = {}) => {\n    switch (action.type) {\n        case \"LOGOUT\":\n        case \"UNLOAD_TEMPLATES\":\n            return {};\n\n        case \"SET_TEMPLATES\":\n            return { ...state };\n\n        default:\n            return { ...state };\n    }\n};\n\nexport default templates;\n","import createHistory from \"history/createBrowserHistory\";\nexport const history = createHistory();\n","import { combineReducers } from \"redux\";\nimport { compose } from \"redux\";\nimport { auth } from \"./auth\";\nimport { templates } from \"./templates\";\nimport { connectRouter } from \"connected-react-router\";\nimport { history } from \"../history\";\n\nconst DEFAULT_STATE = {};\n\nexport const mainReducer = (state: any = DEFAULT_STATE, action: any = {}) => {\n    switch (action.type) {\n        default:\n            return { ...state };\n    }\n};\n\nexport default compose(\n    mainReducer,\n    combineReducers({ auth, templates, router: connectRouter(history) })\n);\n","import { createStore, applyMiddleware, compose } from \"redux\";\n\nimport rootReducer from \"./reducers\";\nimport { save, load } from \"redux-localstorage-simple\";\n\nconst composeEnhancers =\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst loaded = load({ namespace: \"fakenom.state\" });\nconsole.log(\"loaded storage\", loaded);\nexport default createStore(\n    rootReducer,\n    loaded,\n    composeEnhancers(applyMiddleware(save({ namespace: \"fakenom.state\" })))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootswatch/dist/cosmo/bootstrap.min.css\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}