{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FILE_SERVER_BASE_URL","document","location","protocol","load_cache","raw","window","localStorage","getItem","JSON","parse","write_cache","items","value","stringify","setItem","console","log","App","useState","progress","setProgress","isUploading","setIsUploading","error","setError","files","setFiles","uploads","setUploads","onDrop","useCallback","acceptedFiles","concat","useEffect","title","timer","setTimeout","length","listFiles","clearTimeout","useDropzone","getRootProps","getInputProps","isDragActive","superagent","end","err","response","body","Container","fluid","Row","Col","md","Card","bg","text","Body","Title","Text","ListGroup","map","file","Item","key","name","target","rel","href","ButtonGroup","Button","onClick","variant","removeItem","Spinner","animation","event","http","forEach","attach","on","e","direction","percent","preventDefault","sm","ProgressBar","now","label","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.79296c56.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, MouseEvent } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport * as superagent from \"superagent\";\n\nimport { useDropzone } from \"react-dropzone\";\n\ninterface File {\n    readonly name: string;\n    readonly size: number;\n}\n\nconst FILE_SERVER_BASE_URL =\n    document.location.protocol === \"http:\"\n        ? \"https://localhost:5000\"\n        : \"https://cahoots.in\";\n\nfunction load_cache(): Array<File> {\n    const raw = window.localStorage.getItem(\"uploads\");\n    if (typeof raw === \"string\") {\n        const items: Array<File> = JSON.parse(raw);\n        return items;\n    }\n    return [];\n}\nfunction write_cache(items: Array<File>) {\n    const value: string = JSON.stringify(items);\n    window.localStorage.setItem(\"uploads\", value);\n    console.log(\"write_cache\", value);\n}\n\nfunction clear_cache() {\n    window.localStorage.removeItem(\"uploads\");\n}\nfunction App() {\n    const [progress, setProgress] = useState(0);\n    const [isUploading, setIsUploading] = useState(false);\n    const [error, setError] = useState(null);\n    const [files, setFiles] = useState([]);\n    const [uploads, setUploads] = useState(load_cache());\n\n    function doUpload(event: MouseEvent<HTMLButtonElement>) {\n        let http = superagent.post(`${FILE_SERVER_BASE_URL}/upload`);\n        files.forEach(file => {\n            http = http.attach(\"file\", file);\n        });\n        http.on(\"progress\", e => {\n            if (e.direction === \"upload\" && e.percent) {\n                setIsUploading(true);\n                setProgress(e.percent);\n                console.log(e);\n            }\n        }).end((err, response) => {\n            setIsUploading(false);\n            setProgress(0);\n            setFiles([]);\n            if (err) {\n                setError(err);\n            } else {\n                setUploads(response.body);\n                setError(null);\n                write_cache(response.body);\n            }\n        });\n        event.preventDefault();\n    }\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(files => files.concat(acceptedFiles));\n        setError(null);\n    }, []);\n\n    useEffect(() => {\n        // Similar to componentDidMount and componentDidUpdate:\n        document.title = \"Personal File Server\";\n\n        const timer = setTimeout(() => {\n            const cached = load_cache();\n            if (cached.length === 0) {\n                listFiles();\n            }\n        }, 1000);\n        return () => clearTimeout(timer);\n    });\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n        onDrop\n    });\n\n    function listFiles() {\n        superagent.get(`${FILE_SERVER_BASE_URL}/files`).end((err, response) => {\n            if (err) {\n                setError(err);\n            } else if (response.body) {\n                setUploads(response.body as Array<File>);\n                setError(null);\n                write_cache(response.body);\n            }\n        });\n    }\n    return (\n        <Container fluid=\"md\">\n            {error !== null ? (\n                <Row>\n                    <Col md={12}>\n                        <Card bg={\"danger\"} text=\"white\">\n                            <Card.Body {...getRootProps()}>\n                                <Card.Title>Error</Card.Title>\n                                <Card.Text>{`${error}`}</Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            ) : null}\n            <Row>\n                <Col md={12}>\n                    <ListGroup>\n                        {uploads.map(file => {\n                            if (\"name\" in file) {\n                                return (\n                                    <ListGroup.Item key={file.name}>\n                                        <a\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            href={`${FILE_SERVER_BASE_URL}/uploads/${file.name}`}\n                                        >\n                                            {file.name}\n                                        </a>\n                                    </ListGroup.Item>\n                                );\n                            } else {\n                                return null;\n                            }\n                        })}\n                        <ListGroup.Item>\n                            <Row>\n                                <Col md={12}>{uploads.length} files</Col>\n                            </Row>\n                            <Row>\n                                <Col md={9}></Col>\n                                <Col md={3}>\n                                    <ButtonGroup>\n                                        <Button onClick={listFiles}>\n                                            List Files\n\t\t\t\t\t\t\t\t\t\t</Button>\n                                        <Button\n                                            variant=\"danger\"\n                                            onClick={() => {\n                                                clear_cache();\n                                                setUploads([]);\n                                            }}\n                                        >\n                                            Clear Cache\n\t\t\t\t\t\t\t\t\t\t</Button>\n                                    </ButtonGroup>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={12}>\n                    <Card>\n                        {files.length === 0 ? (\n                            <Card.Body {...getRootProps()}>\n                                <Card.Title>Upload Files</Card.Title>\n                                <input {...getInputProps()} />\n\n                                {isDragActive ? (\n                                    <Card.Text>\n                                        Drop the files here ...\n                                    </Card.Text>\n                                ) : (\n                                        <Card.Text>\n                                            Drag 'n' drop some files here, or click\n                                            to select files.\n                                        </Card.Text>\n                                    )}\n                            </Card.Body>\n                        ) : isUploading ? null : (\n                            <Card.Body>\n                                <h1>Ready to upload!</h1>\n                            </Card.Body>\n                        )}\n\n                        {files.length > 0 ? (\n                            <Card.Body>\n                                {isUploading ? (\n                                    <Card.Text>\n                                        <Spinner\n                                            animation=\"grow\"\n                                            variant=\"dark\"\n                                        />\n\t\t\t\t\t\t\t\t\t\tUploading ...\n                                    </Card.Text>\n                                ) : (\n                                        <Button onClick={doUpload}>\n                                            Upload {files.length} file(s)\n                                        </Button>\n                                    )}\n                            </Card.Body>\n                        ) : null}\n                    </Card>\n                </Col>\n                <Col sm></Col>\n            </Row>\n            {progress > 0 ? (\n                <Row>\n                    <Col>\n                        <ProgressBar now={progress} label={`${progress}%`} />\n                    </Col>\n                </Row>\n            ) : null}\n            <Row>\n                <Col>\n                    <a href=\"/login/oauth2\">Login</a>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootswatch/dist/cosmo/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}