{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FILE_SERVER_BASE_URL","document","location","protocol","load_cache","raw","window","localStorage","getItem","JSON","parse","write_cache","items","value","stringify","setItem","console","log","App","useState","progress","setProgress","isUploading","setIsUploading","error","setError","files","setFiles","uploads","setUploads","onDrop","useCallback","acceptedFiles","concat","useEffect","title","timer","setTimeout","length","listFiles","clearTimeout","useDropzone","getRootProps","getInputProps","isDragActive","superagent","end","err","response","body","Container","fluid","Row","Col","md","Card","bg","text","Body","Title","Text","ListGroup","map","file","Item","key","name","target","rel","href","ButtonGroup","Button","onClick","variant","removeItem","Spinner","animation","event","http","forEach","attach","on","e","direction","percent","preventDefault","sm","ProgressBar","now","label","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0be6faaa.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, MouseEvent } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport * as superagent from \"superagent\";\n\nimport { useDropzone } from \"react-dropzone\";\n\ninterface File {\n\treadonly name: string;\n\treadonly size: number;\n}\n\nconst FILE_SERVER_BASE_URL =\n\tdocument.location.protocol === \"http:\"\n\t\t? \"https://localhost:5000\"\n\t\t: \"https://cahoots.in\";\n\nfunction load_cache(): Array<File> {\n\tconst raw = window.localStorage.getItem(\"uploads\");\n\tif (typeof raw === \"string\") {\n\t\tconst items: Array<File> = JSON.parse(raw);\n\t\treturn items;\n\t}\n\treturn [];\n}\nfunction write_cache(items: Array<File>) {\n\tconst value: string = JSON.stringify(items);\n\twindow.localStorage.setItem(\"uploads\", value);\n\tconsole.log(\"write_cache\", value);\n}\n\nfunction clear_cache() {\n\twindow.localStorage.removeItem(\"uploads\");\n}\nfunction App() {\n\tconst [progress, setProgress] = useState(0);\n\tconst [isUploading, setIsUploading] = useState(false);\n\tconst [error, setError] = useState(null);\n\tconst [files, setFiles] = useState([]);\n\tconst [uploads, setUploads] = useState(load_cache());\n\n\tfunction doUpload(event: MouseEvent<HTMLButtonElement>) {\n\t\tlet http = superagent.post(`${FILE_SERVER_BASE_URL}/upload`);\n\t\tfiles.forEach(file => {\n\t\t\thttp = http.attach(\"file\", file);\n\t\t});\n\t\thttp.on(\"progress\", e => {\n\t\t\tif (e.direction === \"upload\" && e.percent) {\n\t\t\t\tsetIsUploading(true);\n\t\t\t\tsetProgress(e.percent);\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t}).end((err, response) => {\n\t\t\tsetIsUploading(false);\n\t\t\tsetProgress(0);\n\t\t\tsetFiles([]);\n\t\t\tif (err) {\n\t\t\t\tsetError(err);\n\t\t\t} else {\n\t\t\t\tsetUploads(response.body);\n\t\t\t\tsetError(null);\n\t\t\t\twrite_cache(response.body);\n\t\t\t}\n\t\t});\n\t\tevent.preventDefault();\n\t}\n\tconst onDrop = useCallback(acceptedFiles => {\n\t\tsetFiles(files => files.concat(acceptedFiles));\n\t\tsetError(null);\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// Similar to componentDidMount and componentDidUpdate:\n\t\tdocument.title = \"Personal File Server\";\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tconst cached = load_cache();\n\t\t\tif (cached.length === 0) {\n\t\t\t\tlistFiles();\n\t\t\t}\n\t\t}, 1000);\n\t\treturn () => clearTimeout(timer);\n\t});\n\tconst { getRootProps, getInputProps, isDragActive } = useDropzone({\n\t\tonDrop\n\t});\n\n\tfunction listFiles() {\n\t\tsuperagent.get(`${FILE_SERVER_BASE_URL}/files`).end((err, response) => {\n\t\t\tif (err) {\n\t\t\t\tsetError(err);\n\t\t\t} else if (response.body) {\n\t\t\t\tsetUploads(response.body as Array<File>);\n\t\t\t\tsetError(null);\n\t\t\t\twrite_cache(response.body);\n\t\t\t}\n\t\t});\n\t}\n\treturn (\n\t\t<Container fluid=\"md\">\n\t\t\t{error !== null ? (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md={12}>\n\t\t\t\t\t\t<Card bg={\"danger\"} text=\"white\">\n\t\t\t\t\t\t\t<Card.Body {...getRootProps()}>\n\t\t\t\t\t\t\t\t<Card.Title>Error</Card.Title>\n\t\t\t\t\t\t\t\t<Card.Text>{`${error}`}</Card.Text>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t) : null}\n\t\t\t<Row>\n\t\t\t\t<Col md={12}>\n\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t{uploads.map(file => {\n\t\t\t\t\t\t\tif (\"name\" in file) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ListGroup.Item key={file.name}>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\t\t\t\t\t\thref={`${FILE_SERVER_BASE_URL}/uploads/${file.name}`}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{file.name}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col md={12}>{uploads.length} files</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col md={9}></Col>\n\t\t\t\t\t\t\t\t<Col md={3}>\n\t\t\t\t\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t\t\t\t\t<Button onClick={listFiles}>\n\t\t\t\t\t\t\t\t\t\t\tList Files\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tclear_cache();\n\t\t\t\t\t\t\t\t\t\t\t\tsetUploads([]);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tClear Cache\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t</ListGroup>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col md={12}>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t{files.length === 0 ? (\n\t\t\t\t\t\t\t<Card.Body {...getRootProps()}>\n\t\t\t\t\t\t\t\t<Card.Title>Upload Files</Card.Title>\n\t\t\t\t\t\t\t\t<input {...getInputProps()} />\n\n\t\t\t\t\t\t\t\t{isDragActive ? (\n\t\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\t\tDrop the files here ...\n\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\t\tDrag 'n' drop some files here, or click\n\t\t\t\t\t\t\t\t\t\tto select files.\n\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t) : isUploading ? null : (\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<h1>Ready to upload!</h1>\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{files.length > 0 ? (\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t{isUploading ? (\n\t\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\t\t<Spinner\n\t\t\t\t\t\t\t\t\t\t\tanimation=\"grow\"\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"dark\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\tUploading ...\n\t\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Button onClick={doUpload}>\n\t\t\t\t\t\t\t\t\t\tUpload {files.length} file(s)\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t\t<Col sm></Col>\n\t\t\t</Row>\n\t\t\t{progress > 0 ? (\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<ProgressBar now={progress} label={`${progress}%`} />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t) : null}\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootswatch/dist/cosmo/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}